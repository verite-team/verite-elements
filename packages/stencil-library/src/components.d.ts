/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface VuiButton {
        "busy"?: boolean;
        "disabled"?: boolean;
        "form"?: string;
        "name"?: string;
        "size"?: 'default' | 'sm' | 'lg' | 'icon';
        "type": 'button' | 'submit' | 'reset';
        "value"?: string;
        "variant"?: 'default' | 'secondary' | 'outline' | 'ghost' | 'destructive';
        "width"?: 'full' | 'auto';
    }
    interface VuiCard {
        "elevation"?: string;
    }
    interface VuiCardContent {
    }
    interface VuiCardDescription {
        "halign": 'left' | 'center';
    }
    interface VuiCardFooter {
        "variant": 'normal' | 'inset';
    }
    interface VuiCardHeader {
    }
    interface VuiCardTitle {
        "halign": 'left' | 'center';
        "size": 'sm' | 'md' | 'lg';
        "weight": 'bold' | 'medium' | 'light';
    }
    interface VuiDivider {
        "orientation"?: 'horizontal' | 'vertical';
    }
    interface VuiDropdownMenu {
        "position": 'bottom-end' | 'bottom-start' | 'top-end' | 'top-start';
    }
    interface VuiDropdownMenuContent {
    }
    interface VuiDropdownMenuItem {
        "disabled"?: boolean;
    }
    interface VuiDropdownMenuSeparator {
    }
    interface VuiDropdownMenuTrigger {
    }
    interface VuiFlex {
        "direction"?: 'row' | 'column';
        "gap"?: number;
        "grow"?: boolean;
        "halign"?: 'start' | 'center' | 'end';
        "spaceUnit"?: number;
        "valign"?: 'start' | 'center' | 'end';
        "width"?: 'full' | 'auto';
    }
    interface VuiGoogleOneTap {
        "googleClientId": string;
    }
    interface VuiIcon {
        "color"?: string;
        "name": string;
        "size"?: 'xs' | 'sm' | 'md' | 'lg';
    }
    interface VuiLabel {
        "for"?: string;
        "required"?: boolean;
    }
    interface VuiLink {
        "disabled"?: boolean;
        "href"?: string;
        "target"?: '_blank' | '_self' | '_parent' | '_top';
        "variant"?: 'default' | 'muted' | 'destructive';
    }
    interface VuiLogo {
        "name": 'twitter' | 'gitHub' | 'google' | 'apple' | 'paypal';
        "size": number;
    }
    interface VuiOtp {
    }
    interface VuiPoweredBy {
        "label": string;
    }
    interface VuiSignin {
        "styles"?: {
    link?: { [key: string]: string | number }
  };
    }
    interface VuiSignup {
        "styles"?: {
    link?: { [key: string]: string | number }
  };
    }
    interface VuiTextbox {
        "autocomplete"?: string;
        "autocorrect"?: 'on' | 'off';
        "disabled"?: boolean;
        "maxlength"?: number;
        "name"?: string;
        "placeholder"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "type": string;
        "value": string;
    }
    interface VuiThemeToggle {
    }
    interface VuiUserMenu {
    }
}
export interface VuiButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVuiButtonElement;
}
export interface VuiDropdownMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVuiDropdownMenuItemElement;
}
export interface VuiGoogleOneTapCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVuiGoogleOneTapElement;
}
export interface VuiOtpCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVuiOtpElement;
}
export interface VuiSigninCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVuiSigninElement;
}
export interface VuiSignupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVuiSignupElement;
}
export interface VuiTextboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVuiTextboxElement;
}
declare global {
    interface HTMLVuiButtonElementEventMap {
        "buttonClick": MouseEvent;
    }
    interface HTMLVuiButtonElement extends Components.VuiButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVuiButtonElementEventMap>(type: K, listener: (this: HTMLVuiButtonElement, ev: VuiButtonCustomEvent<HTMLVuiButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVuiButtonElementEventMap>(type: K, listener: (this: HTMLVuiButtonElement, ev: VuiButtonCustomEvent<HTMLVuiButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVuiButtonElement: {
        prototype: HTMLVuiButtonElement;
        new (): HTMLVuiButtonElement;
    };
    interface HTMLVuiCardElement extends Components.VuiCard, HTMLStencilElement {
    }
    var HTMLVuiCardElement: {
        prototype: HTMLVuiCardElement;
        new (): HTMLVuiCardElement;
    };
    interface HTMLVuiCardContentElement extends Components.VuiCardContent, HTMLStencilElement {
    }
    var HTMLVuiCardContentElement: {
        prototype: HTMLVuiCardContentElement;
        new (): HTMLVuiCardContentElement;
    };
    interface HTMLVuiCardDescriptionElement extends Components.VuiCardDescription, HTMLStencilElement {
    }
    var HTMLVuiCardDescriptionElement: {
        prototype: HTMLVuiCardDescriptionElement;
        new (): HTMLVuiCardDescriptionElement;
    };
    interface HTMLVuiCardFooterElement extends Components.VuiCardFooter, HTMLStencilElement {
    }
    var HTMLVuiCardFooterElement: {
        prototype: HTMLVuiCardFooterElement;
        new (): HTMLVuiCardFooterElement;
    };
    interface HTMLVuiCardHeaderElement extends Components.VuiCardHeader, HTMLStencilElement {
    }
    var HTMLVuiCardHeaderElement: {
        prototype: HTMLVuiCardHeaderElement;
        new (): HTMLVuiCardHeaderElement;
    };
    interface HTMLVuiCardTitleElement extends Components.VuiCardTitle, HTMLStencilElement {
    }
    var HTMLVuiCardTitleElement: {
        prototype: HTMLVuiCardTitleElement;
        new (): HTMLVuiCardTitleElement;
    };
    interface HTMLVuiDividerElement extends Components.VuiDivider, HTMLStencilElement {
    }
    var HTMLVuiDividerElement: {
        prototype: HTMLVuiDividerElement;
        new (): HTMLVuiDividerElement;
    };
    interface HTMLVuiDropdownMenuElement extends Components.VuiDropdownMenu, HTMLStencilElement {
    }
    var HTMLVuiDropdownMenuElement: {
        prototype: HTMLVuiDropdownMenuElement;
        new (): HTMLVuiDropdownMenuElement;
    };
    interface HTMLVuiDropdownMenuContentElement extends Components.VuiDropdownMenuContent, HTMLStencilElement {
    }
    var HTMLVuiDropdownMenuContentElement: {
        prototype: HTMLVuiDropdownMenuContentElement;
        new (): HTMLVuiDropdownMenuContentElement;
    };
    interface HTMLVuiDropdownMenuItemElementEventMap {
        "itemClick": void;
    }
    interface HTMLVuiDropdownMenuItemElement extends Components.VuiDropdownMenuItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVuiDropdownMenuItemElementEventMap>(type: K, listener: (this: HTMLVuiDropdownMenuItemElement, ev: VuiDropdownMenuItemCustomEvent<HTMLVuiDropdownMenuItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVuiDropdownMenuItemElementEventMap>(type: K, listener: (this: HTMLVuiDropdownMenuItemElement, ev: VuiDropdownMenuItemCustomEvent<HTMLVuiDropdownMenuItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVuiDropdownMenuItemElement: {
        prototype: HTMLVuiDropdownMenuItemElement;
        new (): HTMLVuiDropdownMenuItemElement;
    };
    interface HTMLVuiDropdownMenuSeparatorElement extends Components.VuiDropdownMenuSeparator, HTMLStencilElement {
    }
    var HTMLVuiDropdownMenuSeparatorElement: {
        prototype: HTMLVuiDropdownMenuSeparatorElement;
        new (): HTMLVuiDropdownMenuSeparatorElement;
    };
    interface HTMLVuiDropdownMenuTriggerElement extends Components.VuiDropdownMenuTrigger, HTMLStencilElement {
    }
    var HTMLVuiDropdownMenuTriggerElement: {
        prototype: HTMLVuiDropdownMenuTriggerElement;
        new (): HTMLVuiDropdownMenuTriggerElement;
    };
    interface HTMLVuiFlexElement extends Components.VuiFlex, HTMLStencilElement {
    }
    var HTMLVuiFlexElement: {
        prototype: HTMLVuiFlexElement;
        new (): HTMLVuiFlexElement;
    };
    interface HTMLVuiGoogleOneTapElementEventMap {
        "googleCredential": any;
        "googleError": any;
    }
    interface HTMLVuiGoogleOneTapElement extends Components.VuiGoogleOneTap, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVuiGoogleOneTapElementEventMap>(type: K, listener: (this: HTMLVuiGoogleOneTapElement, ev: VuiGoogleOneTapCustomEvent<HTMLVuiGoogleOneTapElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVuiGoogleOneTapElementEventMap>(type: K, listener: (this: HTMLVuiGoogleOneTapElement, ev: VuiGoogleOneTapCustomEvent<HTMLVuiGoogleOneTapElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVuiGoogleOneTapElement: {
        prototype: HTMLVuiGoogleOneTapElement;
        new (): HTMLVuiGoogleOneTapElement;
    };
    interface HTMLVuiIconElement extends Components.VuiIcon, HTMLStencilElement {
    }
    var HTMLVuiIconElement: {
        prototype: HTMLVuiIconElement;
        new (): HTMLVuiIconElement;
    };
    interface HTMLVuiLabelElement extends Components.VuiLabel, HTMLStencilElement {
    }
    var HTMLVuiLabelElement: {
        prototype: HTMLVuiLabelElement;
        new (): HTMLVuiLabelElement;
    };
    interface HTMLVuiLinkElement extends Components.VuiLink, HTMLStencilElement {
    }
    var HTMLVuiLinkElement: {
        prototype: HTMLVuiLinkElement;
        new (): HTMLVuiLinkElement;
    };
    interface HTMLVuiLogoElement extends Components.VuiLogo, HTMLStencilElement {
    }
    var HTMLVuiLogoElement: {
        prototype: HTMLVuiLogoElement;
        new (): HTMLVuiLogoElement;
    };
    interface HTMLVuiOtpElementEventMap {
        "formSubmit": any;
    }
    interface HTMLVuiOtpElement extends Components.VuiOtp, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVuiOtpElementEventMap>(type: K, listener: (this: HTMLVuiOtpElement, ev: VuiOtpCustomEvent<HTMLVuiOtpElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVuiOtpElementEventMap>(type: K, listener: (this: HTMLVuiOtpElement, ev: VuiOtpCustomEvent<HTMLVuiOtpElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVuiOtpElement: {
        prototype: HTMLVuiOtpElement;
        new (): HTMLVuiOtpElement;
    };
    interface HTMLVuiPoweredByElement extends Components.VuiPoweredBy, HTMLStencilElement {
    }
    var HTMLVuiPoweredByElement: {
        prototype: HTMLVuiPoweredByElement;
        new (): HTMLVuiPoweredByElement;
    };
    interface HTMLVuiSigninElementEventMap {
        "formSubmit": { email: string; password: string };
        "ready": void;
    }
    interface HTMLVuiSigninElement extends Components.VuiSignin, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVuiSigninElementEventMap>(type: K, listener: (this: HTMLVuiSigninElement, ev: VuiSigninCustomEvent<HTMLVuiSigninElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVuiSigninElementEventMap>(type: K, listener: (this: HTMLVuiSigninElement, ev: VuiSigninCustomEvent<HTMLVuiSigninElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVuiSigninElement: {
        prototype: HTMLVuiSigninElement;
        new (): HTMLVuiSigninElement;
    };
    interface HTMLVuiSignupElementEventMap {
        "ready": void;
    }
    interface HTMLVuiSignupElement extends Components.VuiSignup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVuiSignupElementEventMap>(type: K, listener: (this: HTMLVuiSignupElement, ev: VuiSignupCustomEvent<HTMLVuiSignupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVuiSignupElementEventMap>(type: K, listener: (this: HTMLVuiSignupElement, ev: VuiSignupCustomEvent<HTMLVuiSignupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVuiSignupElement: {
        prototype: HTMLVuiSignupElement;
        new (): HTMLVuiSignupElement;
    };
    interface HTMLVuiTextboxElementEventMap {
        "valueChange": string;
        "inputChange": string;
        "enterKey": void;
    }
    interface HTMLVuiTextboxElement extends Components.VuiTextbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVuiTextboxElementEventMap>(type: K, listener: (this: HTMLVuiTextboxElement, ev: VuiTextboxCustomEvent<HTMLVuiTextboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVuiTextboxElementEventMap>(type: K, listener: (this: HTMLVuiTextboxElement, ev: VuiTextboxCustomEvent<HTMLVuiTextboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVuiTextboxElement: {
        prototype: HTMLVuiTextboxElement;
        new (): HTMLVuiTextboxElement;
    };
    interface HTMLVuiThemeToggleElement extends Components.VuiThemeToggle, HTMLStencilElement {
    }
    var HTMLVuiThemeToggleElement: {
        prototype: HTMLVuiThemeToggleElement;
        new (): HTMLVuiThemeToggleElement;
    };
    interface HTMLVuiUserMenuElement extends Components.VuiUserMenu, HTMLStencilElement {
    }
    var HTMLVuiUserMenuElement: {
        prototype: HTMLVuiUserMenuElement;
        new (): HTMLVuiUserMenuElement;
    };
    interface HTMLElementTagNameMap {
        "vui-button": HTMLVuiButtonElement;
        "vui-card": HTMLVuiCardElement;
        "vui-card-content": HTMLVuiCardContentElement;
        "vui-card-description": HTMLVuiCardDescriptionElement;
        "vui-card-footer": HTMLVuiCardFooterElement;
        "vui-card-header": HTMLVuiCardHeaderElement;
        "vui-card-title": HTMLVuiCardTitleElement;
        "vui-divider": HTMLVuiDividerElement;
        "vui-dropdown-menu": HTMLVuiDropdownMenuElement;
        "vui-dropdown-menu-content": HTMLVuiDropdownMenuContentElement;
        "vui-dropdown-menu-item": HTMLVuiDropdownMenuItemElement;
        "vui-dropdown-menu-separator": HTMLVuiDropdownMenuSeparatorElement;
        "vui-dropdown-menu-trigger": HTMLVuiDropdownMenuTriggerElement;
        "vui-flex": HTMLVuiFlexElement;
        "vui-google-one-tap": HTMLVuiGoogleOneTapElement;
        "vui-icon": HTMLVuiIconElement;
        "vui-label": HTMLVuiLabelElement;
        "vui-link": HTMLVuiLinkElement;
        "vui-logo": HTMLVuiLogoElement;
        "vui-otp": HTMLVuiOtpElement;
        "vui-powered-by": HTMLVuiPoweredByElement;
        "vui-signin": HTMLVuiSigninElement;
        "vui-signup": HTMLVuiSignupElement;
        "vui-textbox": HTMLVuiTextboxElement;
        "vui-theme-toggle": HTMLVuiThemeToggleElement;
        "vui-user-menu": HTMLVuiUserMenuElement;
    }
}
declare namespace LocalJSX {
    interface VuiButton {
        "busy"?: boolean;
        "disabled"?: boolean;
        "form"?: string;
        "name"?: string;
        "onButtonClick"?: (event: VuiButtonCustomEvent<MouseEvent>) => void;
        "size"?: 'default' | 'sm' | 'lg' | 'icon';
        "type"?: 'button' | 'submit' | 'reset';
        "value"?: string;
        "variant"?: 'default' | 'secondary' | 'outline' | 'ghost' | 'destructive';
        "width"?: 'full' | 'auto';
    }
    interface VuiCard {
        "elevation"?: string;
    }
    interface VuiCardContent {
    }
    interface VuiCardDescription {
        "halign"?: 'left' | 'center';
    }
    interface VuiCardFooter {
        "variant"?: 'normal' | 'inset';
    }
    interface VuiCardHeader {
    }
    interface VuiCardTitle {
        "halign"?: 'left' | 'center';
        "size"?: 'sm' | 'md' | 'lg';
        "weight"?: 'bold' | 'medium' | 'light';
    }
    interface VuiDivider {
        "orientation"?: 'horizontal' | 'vertical';
    }
    interface VuiDropdownMenu {
        "position"?: 'bottom-end' | 'bottom-start' | 'top-end' | 'top-start';
    }
    interface VuiDropdownMenuContent {
    }
    interface VuiDropdownMenuItem {
        "disabled"?: boolean;
        "onItemClick"?: (event: VuiDropdownMenuItemCustomEvent<void>) => void;
    }
    interface VuiDropdownMenuSeparator {
    }
    interface VuiDropdownMenuTrigger {
    }
    interface VuiFlex {
        "direction"?: 'row' | 'column';
        "gap"?: number;
        "grow"?: boolean;
        "halign"?: 'start' | 'center' | 'end';
        "spaceUnit"?: number;
        "valign"?: 'start' | 'center' | 'end';
        "width"?: 'full' | 'auto';
    }
    interface VuiGoogleOneTap {
        "googleClientId": string;
        "onGoogleCredential"?: (event: VuiGoogleOneTapCustomEvent<any>) => void;
        "onGoogleError"?: (event: VuiGoogleOneTapCustomEvent<any>) => void;
    }
    interface VuiIcon {
        "color"?: string;
        "name": string;
        "size"?: 'xs' | 'sm' | 'md' | 'lg';
    }
    interface VuiLabel {
        "for"?: string;
        "required"?: boolean;
    }
    interface VuiLink {
        "disabled"?: boolean;
        "href"?: string;
        "target"?: '_blank' | '_self' | '_parent' | '_top';
        "variant"?: 'default' | 'muted' | 'destructive';
    }
    interface VuiLogo {
        "name"?: 'twitter' | 'gitHub' | 'google' | 'apple' | 'paypal';
        "size"?: number;
    }
    interface VuiOtp {
        "onFormSubmit"?: (event: VuiOtpCustomEvent<any>) => void;
    }
    interface VuiPoweredBy {
        "label"?: string;
    }
    interface VuiSignin {
        "onFormSubmit"?: (event: VuiSigninCustomEvent<{ email: string; password: string }>) => void;
        "onReady"?: (event: VuiSigninCustomEvent<void>) => void;
        "styles"?: {
    link?: { [key: string]: string | number }
  };
    }
    interface VuiSignup {
        "onReady"?: (event: VuiSignupCustomEvent<void>) => void;
        "styles"?: {
    link?: { [key: string]: string | number }
  };
    }
    interface VuiTextbox {
        "autocomplete"?: string;
        "autocorrect"?: 'on' | 'off';
        "disabled"?: boolean;
        "maxlength"?: number;
        "name"?: string;
        "onEnterKey"?: (event: VuiTextboxCustomEvent<void>) => void;
        "onInputChange"?: (event: VuiTextboxCustomEvent<string>) => void;
        "onValueChange"?: (event: VuiTextboxCustomEvent<string>) => void;
        "placeholder"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "type"?: string;
        "value"?: string;
    }
    interface VuiThemeToggle {
    }
    interface VuiUserMenu {
    }
    interface IntrinsicElements {
        "vui-button": VuiButton;
        "vui-card": VuiCard;
        "vui-card-content": VuiCardContent;
        "vui-card-description": VuiCardDescription;
        "vui-card-footer": VuiCardFooter;
        "vui-card-header": VuiCardHeader;
        "vui-card-title": VuiCardTitle;
        "vui-divider": VuiDivider;
        "vui-dropdown-menu": VuiDropdownMenu;
        "vui-dropdown-menu-content": VuiDropdownMenuContent;
        "vui-dropdown-menu-item": VuiDropdownMenuItem;
        "vui-dropdown-menu-separator": VuiDropdownMenuSeparator;
        "vui-dropdown-menu-trigger": VuiDropdownMenuTrigger;
        "vui-flex": VuiFlex;
        "vui-google-one-tap": VuiGoogleOneTap;
        "vui-icon": VuiIcon;
        "vui-label": VuiLabel;
        "vui-link": VuiLink;
        "vui-logo": VuiLogo;
        "vui-otp": VuiOtp;
        "vui-powered-by": VuiPoweredBy;
        "vui-signin": VuiSignin;
        "vui-signup": VuiSignup;
        "vui-textbox": VuiTextbox;
        "vui-theme-toggle": VuiThemeToggle;
        "vui-user-menu": VuiUserMenu;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "vui-button": LocalJSX.VuiButton & JSXBase.HTMLAttributes<HTMLVuiButtonElement>;
            "vui-card": LocalJSX.VuiCard & JSXBase.HTMLAttributes<HTMLVuiCardElement>;
            "vui-card-content": LocalJSX.VuiCardContent & JSXBase.HTMLAttributes<HTMLVuiCardContentElement>;
            "vui-card-description": LocalJSX.VuiCardDescription & JSXBase.HTMLAttributes<HTMLVuiCardDescriptionElement>;
            "vui-card-footer": LocalJSX.VuiCardFooter & JSXBase.HTMLAttributes<HTMLVuiCardFooterElement>;
            "vui-card-header": LocalJSX.VuiCardHeader & JSXBase.HTMLAttributes<HTMLVuiCardHeaderElement>;
            "vui-card-title": LocalJSX.VuiCardTitle & JSXBase.HTMLAttributes<HTMLVuiCardTitleElement>;
            "vui-divider": LocalJSX.VuiDivider & JSXBase.HTMLAttributes<HTMLVuiDividerElement>;
            "vui-dropdown-menu": LocalJSX.VuiDropdownMenu & JSXBase.HTMLAttributes<HTMLVuiDropdownMenuElement>;
            "vui-dropdown-menu-content": LocalJSX.VuiDropdownMenuContent & JSXBase.HTMLAttributes<HTMLVuiDropdownMenuContentElement>;
            "vui-dropdown-menu-item": LocalJSX.VuiDropdownMenuItem & JSXBase.HTMLAttributes<HTMLVuiDropdownMenuItemElement>;
            "vui-dropdown-menu-separator": LocalJSX.VuiDropdownMenuSeparator & JSXBase.HTMLAttributes<HTMLVuiDropdownMenuSeparatorElement>;
            "vui-dropdown-menu-trigger": LocalJSX.VuiDropdownMenuTrigger & JSXBase.HTMLAttributes<HTMLVuiDropdownMenuTriggerElement>;
            "vui-flex": LocalJSX.VuiFlex & JSXBase.HTMLAttributes<HTMLVuiFlexElement>;
            "vui-google-one-tap": LocalJSX.VuiGoogleOneTap & JSXBase.HTMLAttributes<HTMLVuiGoogleOneTapElement>;
            "vui-icon": LocalJSX.VuiIcon & JSXBase.HTMLAttributes<HTMLVuiIconElement>;
            "vui-label": LocalJSX.VuiLabel & JSXBase.HTMLAttributes<HTMLVuiLabelElement>;
            "vui-link": LocalJSX.VuiLink & JSXBase.HTMLAttributes<HTMLVuiLinkElement>;
            "vui-logo": LocalJSX.VuiLogo & JSXBase.HTMLAttributes<HTMLVuiLogoElement>;
            "vui-otp": LocalJSX.VuiOtp & JSXBase.HTMLAttributes<HTMLVuiOtpElement>;
            "vui-powered-by": LocalJSX.VuiPoweredBy & JSXBase.HTMLAttributes<HTMLVuiPoweredByElement>;
            "vui-signin": LocalJSX.VuiSignin & JSXBase.HTMLAttributes<HTMLVuiSigninElement>;
            "vui-signup": LocalJSX.VuiSignup & JSXBase.HTMLAttributes<HTMLVuiSignupElement>;
            "vui-textbox": LocalJSX.VuiTextbox & JSXBase.HTMLAttributes<HTMLVuiTextboxElement>;
            "vui-theme-toggle": LocalJSX.VuiThemeToggle & JSXBase.HTMLAttributes<HTMLVuiThemeToggleElement>;
            "vui-user-menu": LocalJSX.VuiUserMenu & JSXBase.HTMLAttributes<HTMLVuiUserMenuElement>;
        }
    }
}
