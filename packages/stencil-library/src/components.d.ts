/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { EmailValidationOptions, PasswordValidationOptions, ValidationRule } from "./utils/validation";
import { SignInWithIdTokenCredentials } from "./components/google-one-tap/google-one-tap-interfaces";
import { LogoName } from "./components/logo/logo";
import { OtpLabels } from "./components/otp/otp-interfaces";
import { SignInFormData } from "./components/signin/signin-interfaces";
import { SignUpFormData } from "./components/signup/signup-interfaces";
import { ToastProps, ToastType } from "./components/toast/toast-interfaces";
import { MenuAction } from "./components/user-menu/user-menu-interfaces";
export { EmailValidationOptions, PasswordValidationOptions, ValidationRule } from "./utils/validation";
export { SignInWithIdTokenCredentials } from "./components/google-one-tap/google-one-tap-interfaces";
export { LogoName } from "./components/logo/logo";
export { OtpLabels } from "./components/otp/otp-interfaces";
export { SignInFormData } from "./components/signin/signin-interfaces";
export { SignUpFormData } from "./components/signup/signup-interfaces";
export { ToastProps, ToastType } from "./components/toast/toast-interfaces";
export { MenuAction } from "./components/user-menu/user-menu-interfaces";
export namespace Components {
    interface VeriteConnector {
        "type": 'signup' | 'signin';
    }
    interface VuiAuthCard {
        "action": string;
        "description": string;
        "elevation"?: 'none' | 'sm' | 'md' | 'lg' | 'xl';
        "heading": string;
        "prompt": string;
        "variant"?: 'default' | 'inset';
    }
    interface VuiAuthFooter {
        "action"?: string;
        "prompt"?: string;
        "showDivider"?: boolean;
        "showPoweredBy"?: boolean;
        "variant"?: 'default' | 'inset';
    }
    interface VuiAuthHeader {
        "description": string;
        "heading": string;
    }
    interface VuiButton {
        "busy"?: boolean;
        "disabled"?: boolean;
        "form"?: string;
        "name"?: string;
        "size"?: 'default' | 'sm' | 'lg' | 'icon';
        "type": 'button' | 'submit' | 'reset';
        "value"?: string;
        "variant"?: 'default' | 'secondary' | 'outline' | 'ghost' | 'destructive';
        "width"?: 'full' | 'auto';
    }
    interface VuiCard {
        "elevation"?: 'none' | 'sm' | 'md' | 'lg' | 'xl';
    }
    interface VuiCardContent {
    }
    interface VuiCardDescription {
        "halign": 'left' | 'center';
    }
    interface VuiCardFooter {
        "variant": 'default' | 'inset';
    }
    interface VuiCardHeader {
    }
    interface VuiCardTitle {
        "halign": 'left' | 'center';
        "size": 'sm' | 'md' | 'lg';
        "weight": 'bold' | 'medium' | 'light';
    }
    interface VuiDivider {
        "orientation"?: 'horizontal' | 'vertical';
    }
    interface VuiDropdownMenu {
        "position": 'bottom-end' | 'bottom-start' | 'top-end' | 'top-start';
    }
    interface VuiDropdownMenuContent {
    }
    interface VuiDropdownMenuItem {
        "disabled"?: boolean;
    }
    interface VuiDropdownMenuSeparator {
    }
    interface VuiDropdownMenuTrigger {
    }
    interface VuiErrorMessage {
        /**
          * The error message to display
         */
        "message": string;
        /**
          * Whether to show the error icon
         */
        "showIcon": boolean;
    }
    interface VuiFlex {
        "breakpoint"?: string;
        "breakpointDirection"?: 'row' | 'column';
        "direction"?: 'row' | 'column';
        "gap"?: number;
        "grow"?: boolean;
        "items"?: 'start' | 'center' | 'end' | 'stretch' | 'baseline';
        "justify"?: 'start' | 'center' | 'end' | 'between' | 'around' | 'evenly';
        "spaceUnit"?: number;
        "width"?: 'full' | 'auto';
        "wrap"?: 'nowrap' | 'wrap' | 'wrap-reverse';
    }
    interface VuiFormControl {
        "rules": ValidationRule[];
        "value": any;
    }
    interface VuiGoogleOneTap {
        "googleClientId": string;
    }
    interface VuiI18n {
        "params"?: Record<string, string> | string;
        "text": string;
    }
    interface VuiIcon {
        "color"?: string;
        "name": string;
        "size"?: 'xs' | 'sm' | 'md' | 'lg';
    }
    interface VuiLabel {
        "for"?: string;
        "required"?: boolean;
    }
    interface VuiLink {
        "disabled"?: boolean;
        "href"?: string;
        "target"?: '_blank' | '_self' | '_parent' | '_top';
        "variant"?: 'default' | 'muted' | 'destructive';
    }
    interface VuiLogo {
        /**
          * The name of the logo to display
         */
        "name": LogoName;
        /**
          * The size of the logo in pixels
         */
        "size": number;
    }
    interface VuiOtp {
        "labels": OtpLabels;
    }
    interface VuiPlaceholder {
        /**
          * Height of the placeholder in pixels
         */
        "height": number;
        /**
          * Border radius in pixels. Use 9999 for fully rounded
         */
        "radius": number;
        /**
          * Width of the placeholder in pixels
         */
        "width": number;
    }
    interface VuiPoweredBy {
        "label": string;
    }
    interface VuiSignin {
        /**
          * Email validation options
         */
        "emailValidation"?: EmailValidationOptions | string;
        /**
          * Controls the loading state of the component
         */
        "isLoading"?: boolean;
        /**
          * Password validation options
         */
        "passwordValidation"?: PasswordValidationOptions;
        "showForgotPassword"?: boolean;
    }
    interface VuiSignup {
        "email"?: string;
        /**
          * Email validation options
         */
        "emailValidation"?: EmailValidationOptions | string;
        "firstName"?: string;
        /**
          * Controls the loading state of the component
         */
        "isLoading"?: boolean;
        "lastName"?: string;
        "password"?: string;
        /**
          * Password validation options
         */
        "passwordValidation"?: PasswordValidationOptions;
        "styles"?: {
    link?: { [key: string]: string | number }
  };
    }
    interface VuiSpinner {
        "color": string;
        "size": 'small' | 'medium' | 'large';
    }
    interface VuiTextbox {
        "autocomplete"?: string;
        "autocorrect"?: 'on' | 'off';
        "disabled"?: boolean;
        "maxlength"?: number;
        "name"?: string;
        "placeholder"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "type": string;
        "value": string;
    }
    interface VuiThemeToggle {
    }
    interface VuiToast {
        "dismissToast": (id: string) => Promise<void>;
        "position": 'top-left' | 'top-center' | 'top-right' | 'bottom-left' | 'bottom-center' | 'bottom-right';
        "show": (toast: Omit<ToastProps, 'id'>) => Promise<string>;
        "update": (id: string, toast: Partial<ToastProps>) => Promise<void>;
    }
    interface VuiUserMenu {
    }
}
export interface VuiAuthFooterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVuiAuthFooterElement;
}
export interface VuiButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVuiButtonElement;
}
export interface VuiDropdownMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVuiDropdownMenuItemElement;
}
export interface VuiGoogleOneTapCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVuiGoogleOneTapElement;
}
export interface VuiOtpCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVuiOtpElement;
}
export interface VuiSigninCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVuiSigninElement;
}
export interface VuiSignupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVuiSignupElement;
}
export interface VuiTextboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVuiTextboxElement;
}
export interface VuiToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVuiToastElement;
}
export interface VuiUserMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVuiUserMenuElement;
}
declare global {
    interface HTMLVeriteConnectorElement extends Components.VeriteConnector, HTMLStencilElement {
    }
    var HTMLVeriteConnectorElement: {
        prototype: HTMLVeriteConnectorElement;
        new (): HTMLVeriteConnectorElement;
    };
    interface HTMLVuiAuthCardElement extends Components.VuiAuthCard, HTMLStencilElement {
    }
    var HTMLVuiAuthCardElement: {
        prototype: HTMLVuiAuthCardElement;
        new (): HTMLVuiAuthCardElement;
    };
    interface HTMLVuiAuthFooterElementEventMap {
        "actionClick": any;
    }
    interface HTMLVuiAuthFooterElement extends Components.VuiAuthFooter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVuiAuthFooterElementEventMap>(type: K, listener: (this: HTMLVuiAuthFooterElement, ev: VuiAuthFooterCustomEvent<HTMLVuiAuthFooterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVuiAuthFooterElementEventMap>(type: K, listener: (this: HTMLVuiAuthFooterElement, ev: VuiAuthFooterCustomEvent<HTMLVuiAuthFooterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVuiAuthFooterElement: {
        prototype: HTMLVuiAuthFooterElement;
        new (): HTMLVuiAuthFooterElement;
    };
    interface HTMLVuiAuthHeaderElement extends Components.VuiAuthHeader, HTMLStencilElement {
    }
    var HTMLVuiAuthHeaderElement: {
        prototype: HTMLVuiAuthHeaderElement;
        new (): HTMLVuiAuthHeaderElement;
    };
    interface HTMLVuiButtonElementEventMap {
        "buttonClick": MouseEvent;
    }
    interface HTMLVuiButtonElement extends Components.VuiButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVuiButtonElementEventMap>(type: K, listener: (this: HTMLVuiButtonElement, ev: VuiButtonCustomEvent<HTMLVuiButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVuiButtonElementEventMap>(type: K, listener: (this: HTMLVuiButtonElement, ev: VuiButtonCustomEvent<HTMLVuiButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVuiButtonElement: {
        prototype: HTMLVuiButtonElement;
        new (): HTMLVuiButtonElement;
    };
    interface HTMLVuiCardElement extends Components.VuiCard, HTMLStencilElement {
    }
    var HTMLVuiCardElement: {
        prototype: HTMLVuiCardElement;
        new (): HTMLVuiCardElement;
    };
    interface HTMLVuiCardContentElement extends Components.VuiCardContent, HTMLStencilElement {
    }
    var HTMLVuiCardContentElement: {
        prototype: HTMLVuiCardContentElement;
        new (): HTMLVuiCardContentElement;
    };
    interface HTMLVuiCardDescriptionElement extends Components.VuiCardDescription, HTMLStencilElement {
    }
    var HTMLVuiCardDescriptionElement: {
        prototype: HTMLVuiCardDescriptionElement;
        new (): HTMLVuiCardDescriptionElement;
    };
    interface HTMLVuiCardFooterElement extends Components.VuiCardFooter, HTMLStencilElement {
    }
    var HTMLVuiCardFooterElement: {
        prototype: HTMLVuiCardFooterElement;
        new (): HTMLVuiCardFooterElement;
    };
    interface HTMLVuiCardHeaderElement extends Components.VuiCardHeader, HTMLStencilElement {
    }
    var HTMLVuiCardHeaderElement: {
        prototype: HTMLVuiCardHeaderElement;
        new (): HTMLVuiCardHeaderElement;
    };
    interface HTMLVuiCardTitleElement extends Components.VuiCardTitle, HTMLStencilElement {
    }
    var HTMLVuiCardTitleElement: {
        prototype: HTMLVuiCardTitleElement;
        new (): HTMLVuiCardTitleElement;
    };
    interface HTMLVuiDividerElement extends Components.VuiDivider, HTMLStencilElement {
    }
    var HTMLVuiDividerElement: {
        prototype: HTMLVuiDividerElement;
        new (): HTMLVuiDividerElement;
    };
    interface HTMLVuiDropdownMenuElement extends Components.VuiDropdownMenu, HTMLStencilElement {
    }
    var HTMLVuiDropdownMenuElement: {
        prototype: HTMLVuiDropdownMenuElement;
        new (): HTMLVuiDropdownMenuElement;
    };
    interface HTMLVuiDropdownMenuContentElement extends Components.VuiDropdownMenuContent, HTMLStencilElement {
    }
    var HTMLVuiDropdownMenuContentElement: {
        prototype: HTMLVuiDropdownMenuContentElement;
        new (): HTMLVuiDropdownMenuContentElement;
    };
    interface HTMLVuiDropdownMenuItemElementEventMap {
        "itemClick": void;
    }
    interface HTMLVuiDropdownMenuItemElement extends Components.VuiDropdownMenuItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVuiDropdownMenuItemElementEventMap>(type: K, listener: (this: HTMLVuiDropdownMenuItemElement, ev: VuiDropdownMenuItemCustomEvent<HTMLVuiDropdownMenuItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVuiDropdownMenuItemElementEventMap>(type: K, listener: (this: HTMLVuiDropdownMenuItemElement, ev: VuiDropdownMenuItemCustomEvent<HTMLVuiDropdownMenuItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVuiDropdownMenuItemElement: {
        prototype: HTMLVuiDropdownMenuItemElement;
        new (): HTMLVuiDropdownMenuItemElement;
    };
    interface HTMLVuiDropdownMenuSeparatorElement extends Components.VuiDropdownMenuSeparator, HTMLStencilElement {
    }
    var HTMLVuiDropdownMenuSeparatorElement: {
        prototype: HTMLVuiDropdownMenuSeparatorElement;
        new (): HTMLVuiDropdownMenuSeparatorElement;
    };
    interface HTMLVuiDropdownMenuTriggerElement extends Components.VuiDropdownMenuTrigger, HTMLStencilElement {
    }
    var HTMLVuiDropdownMenuTriggerElement: {
        prototype: HTMLVuiDropdownMenuTriggerElement;
        new (): HTMLVuiDropdownMenuTriggerElement;
    };
    interface HTMLVuiErrorMessageElement extends Components.VuiErrorMessage, HTMLStencilElement {
    }
    var HTMLVuiErrorMessageElement: {
        prototype: HTMLVuiErrorMessageElement;
        new (): HTMLVuiErrorMessageElement;
    };
    interface HTMLVuiFlexElement extends Components.VuiFlex, HTMLStencilElement {
    }
    var HTMLVuiFlexElement: {
        prototype: HTMLVuiFlexElement;
        new (): HTMLVuiFlexElement;
    };
    interface HTMLVuiFormControlElement extends Components.VuiFormControl, HTMLStencilElement {
    }
    var HTMLVuiFormControlElement: {
        prototype: HTMLVuiFormControlElement;
        new (): HTMLVuiFormControlElement;
    };
    interface HTMLVuiGoogleOneTapElementEventMap {
        "googleCredential": SignInWithIdTokenCredentials;
        "googleError": Error;
    }
    interface HTMLVuiGoogleOneTapElement extends Components.VuiGoogleOneTap, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVuiGoogleOneTapElementEventMap>(type: K, listener: (this: HTMLVuiGoogleOneTapElement, ev: VuiGoogleOneTapCustomEvent<HTMLVuiGoogleOneTapElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVuiGoogleOneTapElementEventMap>(type: K, listener: (this: HTMLVuiGoogleOneTapElement, ev: VuiGoogleOneTapCustomEvent<HTMLVuiGoogleOneTapElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVuiGoogleOneTapElement: {
        prototype: HTMLVuiGoogleOneTapElement;
        new (): HTMLVuiGoogleOneTapElement;
    };
    interface HTMLVuiI18nElement extends Components.VuiI18n, HTMLStencilElement {
    }
    var HTMLVuiI18nElement: {
        prototype: HTMLVuiI18nElement;
        new (): HTMLVuiI18nElement;
    };
    interface HTMLVuiIconElement extends Components.VuiIcon, HTMLStencilElement {
    }
    var HTMLVuiIconElement: {
        prototype: HTMLVuiIconElement;
        new (): HTMLVuiIconElement;
    };
    interface HTMLVuiLabelElement extends Components.VuiLabel, HTMLStencilElement {
    }
    var HTMLVuiLabelElement: {
        prototype: HTMLVuiLabelElement;
        new (): HTMLVuiLabelElement;
    };
    interface HTMLVuiLinkElement extends Components.VuiLink, HTMLStencilElement {
    }
    var HTMLVuiLinkElement: {
        prototype: HTMLVuiLinkElement;
        new (): HTMLVuiLinkElement;
    };
    interface HTMLVuiLogoElement extends Components.VuiLogo, HTMLStencilElement {
    }
    var HTMLVuiLogoElement: {
        prototype: HTMLVuiLogoElement;
        new (): HTMLVuiLogoElement;
    };
    interface HTMLVuiOtpElementEventMap {
        "formSubmit": string;
        "ready": void;
        "resend": void;
    }
    interface HTMLVuiOtpElement extends Components.VuiOtp, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVuiOtpElementEventMap>(type: K, listener: (this: HTMLVuiOtpElement, ev: VuiOtpCustomEvent<HTMLVuiOtpElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVuiOtpElementEventMap>(type: K, listener: (this: HTMLVuiOtpElement, ev: VuiOtpCustomEvent<HTMLVuiOtpElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVuiOtpElement: {
        prototype: HTMLVuiOtpElement;
        new (): HTMLVuiOtpElement;
    };
    interface HTMLVuiPlaceholderElement extends Components.VuiPlaceholder, HTMLStencilElement {
    }
    var HTMLVuiPlaceholderElement: {
        prototype: HTMLVuiPlaceholderElement;
        new (): HTMLVuiPlaceholderElement;
    };
    interface HTMLVuiPoweredByElement extends Components.VuiPoweredBy, HTMLStencilElement {
    }
    var HTMLVuiPoweredByElement: {
        prototype: HTMLVuiPoweredByElement;
        new (): HTMLVuiPoweredByElement;
    };
    interface HTMLVuiSigninElementEventMap {
        "forgotPassword": void;
        "formSubmit": SignInFormData;
    }
    interface HTMLVuiSigninElement extends Components.VuiSignin, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVuiSigninElementEventMap>(type: K, listener: (this: HTMLVuiSigninElement, ev: VuiSigninCustomEvent<HTMLVuiSigninElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVuiSigninElementEventMap>(type: K, listener: (this: HTMLVuiSigninElement, ev: VuiSigninCustomEvent<HTMLVuiSigninElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVuiSigninElement: {
        prototype: HTMLVuiSigninElement;
        new (): HTMLVuiSigninElement;
    };
    interface HTMLVuiSignupElementEventMap {
        "formSubmit": SignUpFormData;
    }
    interface HTMLVuiSignupElement extends Components.VuiSignup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVuiSignupElementEventMap>(type: K, listener: (this: HTMLVuiSignupElement, ev: VuiSignupCustomEvent<HTMLVuiSignupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVuiSignupElementEventMap>(type: K, listener: (this: HTMLVuiSignupElement, ev: VuiSignupCustomEvent<HTMLVuiSignupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVuiSignupElement: {
        prototype: HTMLVuiSignupElement;
        new (): HTMLVuiSignupElement;
    };
    interface HTMLVuiSpinnerElement extends Components.VuiSpinner, HTMLStencilElement {
    }
    var HTMLVuiSpinnerElement: {
        prototype: HTMLVuiSpinnerElement;
        new (): HTMLVuiSpinnerElement;
    };
    interface HTMLVuiTextboxElementEventMap {
        "valueChange": string;
        "inputChange": string;
        "enterKey": void;
    }
    interface HTMLVuiTextboxElement extends Components.VuiTextbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVuiTextboxElementEventMap>(type: K, listener: (this: HTMLVuiTextboxElement, ev: VuiTextboxCustomEvent<HTMLVuiTextboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVuiTextboxElementEventMap>(type: K, listener: (this: HTMLVuiTextboxElement, ev: VuiTextboxCustomEvent<HTMLVuiTextboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVuiTextboxElement: {
        prototype: HTMLVuiTextboxElement;
        new (): HTMLVuiTextboxElement;
    };
    interface HTMLVuiThemeToggleElement extends Components.VuiThemeToggle, HTMLStencilElement {
    }
    var HTMLVuiThemeToggleElement: {
        prototype: HTMLVuiThemeToggleElement;
        new (): HTMLVuiThemeToggleElement;
    };
    interface HTMLVuiToastElementEventMap {
        "dismiss": string;
    }
    interface HTMLVuiToastElement extends Components.VuiToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVuiToastElementEventMap>(type: K, listener: (this: HTMLVuiToastElement, ev: VuiToastCustomEvent<HTMLVuiToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVuiToastElementEventMap>(type: K, listener: (this: HTMLVuiToastElement, ev: VuiToastCustomEvent<HTMLVuiToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVuiToastElement: {
        prototype: HTMLVuiToastElement;
        new (): HTMLVuiToastElement;
    };
    interface HTMLVuiUserMenuElementEventMap {
        "menuAction": MenuAction;
    }
    interface HTMLVuiUserMenuElement extends Components.VuiUserMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVuiUserMenuElementEventMap>(type: K, listener: (this: HTMLVuiUserMenuElement, ev: VuiUserMenuCustomEvent<HTMLVuiUserMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVuiUserMenuElementEventMap>(type: K, listener: (this: HTMLVuiUserMenuElement, ev: VuiUserMenuCustomEvent<HTMLVuiUserMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVuiUserMenuElement: {
        prototype: HTMLVuiUserMenuElement;
        new (): HTMLVuiUserMenuElement;
    };
    interface HTMLElementTagNameMap {
        "verite-connector": HTMLVeriteConnectorElement;
        "vui-auth-card": HTMLVuiAuthCardElement;
        "vui-auth-footer": HTMLVuiAuthFooterElement;
        "vui-auth-header": HTMLVuiAuthHeaderElement;
        "vui-button": HTMLVuiButtonElement;
        "vui-card": HTMLVuiCardElement;
        "vui-card-content": HTMLVuiCardContentElement;
        "vui-card-description": HTMLVuiCardDescriptionElement;
        "vui-card-footer": HTMLVuiCardFooterElement;
        "vui-card-header": HTMLVuiCardHeaderElement;
        "vui-card-title": HTMLVuiCardTitleElement;
        "vui-divider": HTMLVuiDividerElement;
        "vui-dropdown-menu": HTMLVuiDropdownMenuElement;
        "vui-dropdown-menu-content": HTMLVuiDropdownMenuContentElement;
        "vui-dropdown-menu-item": HTMLVuiDropdownMenuItemElement;
        "vui-dropdown-menu-separator": HTMLVuiDropdownMenuSeparatorElement;
        "vui-dropdown-menu-trigger": HTMLVuiDropdownMenuTriggerElement;
        "vui-error-message": HTMLVuiErrorMessageElement;
        "vui-flex": HTMLVuiFlexElement;
        "vui-form-control": HTMLVuiFormControlElement;
        "vui-google-one-tap": HTMLVuiGoogleOneTapElement;
        "vui-i18n": HTMLVuiI18nElement;
        "vui-icon": HTMLVuiIconElement;
        "vui-label": HTMLVuiLabelElement;
        "vui-link": HTMLVuiLinkElement;
        "vui-logo": HTMLVuiLogoElement;
        "vui-otp": HTMLVuiOtpElement;
        "vui-placeholder": HTMLVuiPlaceholderElement;
        "vui-powered-by": HTMLVuiPoweredByElement;
        "vui-signin": HTMLVuiSigninElement;
        "vui-signup": HTMLVuiSignupElement;
        "vui-spinner": HTMLVuiSpinnerElement;
        "vui-textbox": HTMLVuiTextboxElement;
        "vui-theme-toggle": HTMLVuiThemeToggleElement;
        "vui-toast": HTMLVuiToastElement;
        "vui-user-menu": HTMLVuiUserMenuElement;
    }
}
declare namespace LocalJSX {
    interface VeriteConnector {
        "type"?: 'signup' | 'signin';
    }
    interface VuiAuthCard {
        "action"?: string;
        "description"?: string;
        "elevation"?: 'none' | 'sm' | 'md' | 'lg' | 'xl';
        "heading"?: string;
        "prompt"?: string;
        "variant"?: 'default' | 'inset';
    }
    interface VuiAuthFooter {
        "action"?: string;
        "onActionClick"?: (event: VuiAuthFooterCustomEvent<any>) => void;
        "prompt"?: string;
        "showDivider"?: boolean;
        "showPoweredBy"?: boolean;
        "variant"?: 'default' | 'inset';
    }
    interface VuiAuthHeader {
        "description"?: string;
        "heading"?: string;
    }
    interface VuiButton {
        "busy"?: boolean;
        "disabled"?: boolean;
        "form"?: string;
        "name"?: string;
        "onButtonClick"?: (event: VuiButtonCustomEvent<MouseEvent>) => void;
        "size"?: 'default' | 'sm' | 'lg' | 'icon';
        "type"?: 'button' | 'submit' | 'reset';
        "value"?: string;
        "variant"?: 'default' | 'secondary' | 'outline' | 'ghost' | 'destructive';
        "width"?: 'full' | 'auto';
    }
    interface VuiCard {
        "elevation"?: 'none' | 'sm' | 'md' | 'lg' | 'xl';
    }
    interface VuiCardContent {
    }
    interface VuiCardDescription {
        "halign"?: 'left' | 'center';
    }
    interface VuiCardFooter {
        "variant"?: 'default' | 'inset';
    }
    interface VuiCardHeader {
    }
    interface VuiCardTitle {
        "halign"?: 'left' | 'center';
        "size"?: 'sm' | 'md' | 'lg';
        "weight"?: 'bold' | 'medium' | 'light';
    }
    interface VuiDivider {
        "orientation"?: 'horizontal' | 'vertical';
    }
    interface VuiDropdownMenu {
        "position"?: 'bottom-end' | 'bottom-start' | 'top-end' | 'top-start';
    }
    interface VuiDropdownMenuContent {
    }
    interface VuiDropdownMenuItem {
        "disabled"?: boolean;
        "onItemClick"?: (event: VuiDropdownMenuItemCustomEvent<void>) => void;
    }
    interface VuiDropdownMenuSeparator {
    }
    interface VuiDropdownMenuTrigger {
    }
    interface VuiErrorMessage {
        /**
          * The error message to display
         */
        "message"?: string;
        /**
          * Whether to show the error icon
         */
        "showIcon"?: boolean;
    }
    interface VuiFlex {
        "breakpoint"?: string;
        "breakpointDirection"?: 'row' | 'column';
        "direction"?: 'row' | 'column';
        "gap"?: number;
        "grow"?: boolean;
        "items"?: 'start' | 'center' | 'end' | 'stretch' | 'baseline';
        "justify"?: 'start' | 'center' | 'end' | 'between' | 'around' | 'evenly';
        "spaceUnit"?: number;
        "width"?: 'full' | 'auto';
        "wrap"?: 'nowrap' | 'wrap' | 'wrap-reverse';
    }
    interface VuiFormControl {
        "rules"?: ValidationRule[];
        "value"?: any;
    }
    interface VuiGoogleOneTap {
        "googleClientId": string;
        "onGoogleCredential"?: (event: VuiGoogleOneTapCustomEvent<SignInWithIdTokenCredentials>) => void;
        "onGoogleError"?: (event: VuiGoogleOneTapCustomEvent<Error>) => void;
    }
    interface VuiI18n {
        "params"?: Record<string, string> | string;
        "text"?: string;
    }
    interface VuiIcon {
        "color"?: string;
        "name": string;
        "size"?: 'xs' | 'sm' | 'md' | 'lg';
    }
    interface VuiLabel {
        "for"?: string;
        "required"?: boolean;
    }
    interface VuiLink {
        "disabled"?: boolean;
        "href"?: string;
        "target"?: '_blank' | '_self' | '_parent' | '_top';
        "variant"?: 'default' | 'muted' | 'destructive';
    }
    interface VuiLogo {
        /**
          * The name of the logo to display
         */
        "name": LogoName;
        /**
          * The size of the logo in pixels
         */
        "size"?: number;
    }
    interface VuiOtp {
        "labels"?: OtpLabels;
        "onFormSubmit"?: (event: VuiOtpCustomEvent<string>) => void;
        "onReady"?: (event: VuiOtpCustomEvent<void>) => void;
        "onResend"?: (event: VuiOtpCustomEvent<void>) => void;
    }
    interface VuiPlaceholder {
        /**
          * Height of the placeholder in pixels
         */
        "height"?: number;
        /**
          * Border radius in pixels. Use 9999 for fully rounded
         */
        "radius"?: number;
        /**
          * Width of the placeholder in pixels
         */
        "width"?: number;
    }
    interface VuiPoweredBy {
        "label"?: string;
    }
    interface VuiSignin {
        /**
          * Email validation options
         */
        "emailValidation"?: EmailValidationOptions | string;
        /**
          * Controls the loading state of the component
         */
        "isLoading"?: boolean;
        "onForgotPassword"?: (event: VuiSigninCustomEvent<void>) => void;
        "onFormSubmit"?: (event: VuiSigninCustomEvent<SignInFormData>) => void;
        /**
          * Password validation options
         */
        "passwordValidation"?: PasswordValidationOptions;
        "showForgotPassword"?: boolean;
    }
    interface VuiSignup {
        "email"?: string;
        /**
          * Email validation options
         */
        "emailValidation"?: EmailValidationOptions | string;
        "firstName"?: string;
        /**
          * Controls the loading state of the component
         */
        "isLoading"?: boolean;
        "lastName"?: string;
        "onFormSubmit"?: (event: VuiSignupCustomEvent<SignUpFormData>) => void;
        "password"?: string;
        /**
          * Password validation options
         */
        "passwordValidation"?: PasswordValidationOptions;
        "styles"?: {
    link?: { [key: string]: string | number }
  };
    }
    interface VuiSpinner {
        "color"?: string;
        "size"?: 'small' | 'medium' | 'large';
    }
    interface VuiTextbox {
        "autocomplete"?: string;
        "autocorrect"?: 'on' | 'off';
        "disabled"?: boolean;
        "maxlength"?: number;
        "name"?: string;
        "onEnterKey"?: (event: VuiTextboxCustomEvent<void>) => void;
        "onInputChange"?: (event: VuiTextboxCustomEvent<string>) => void;
        "onValueChange"?: (event: VuiTextboxCustomEvent<string>) => void;
        "placeholder"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "type"?: string;
        "value"?: string;
    }
    interface VuiThemeToggle {
    }
    interface VuiToast {
        "onDismiss"?: (event: VuiToastCustomEvent<string>) => void;
        "position"?: 'top-left' | 'top-center' | 'top-right' | 'bottom-left' | 'bottom-center' | 'bottom-right';
    }
    interface VuiUserMenu {
        "onMenuAction"?: (event: VuiUserMenuCustomEvent<MenuAction>) => void;
    }
    interface IntrinsicElements {
        "verite-connector": VeriteConnector;
        "vui-auth-card": VuiAuthCard;
        "vui-auth-footer": VuiAuthFooter;
        "vui-auth-header": VuiAuthHeader;
        "vui-button": VuiButton;
        "vui-card": VuiCard;
        "vui-card-content": VuiCardContent;
        "vui-card-description": VuiCardDescription;
        "vui-card-footer": VuiCardFooter;
        "vui-card-header": VuiCardHeader;
        "vui-card-title": VuiCardTitle;
        "vui-divider": VuiDivider;
        "vui-dropdown-menu": VuiDropdownMenu;
        "vui-dropdown-menu-content": VuiDropdownMenuContent;
        "vui-dropdown-menu-item": VuiDropdownMenuItem;
        "vui-dropdown-menu-separator": VuiDropdownMenuSeparator;
        "vui-dropdown-menu-trigger": VuiDropdownMenuTrigger;
        "vui-error-message": VuiErrorMessage;
        "vui-flex": VuiFlex;
        "vui-form-control": VuiFormControl;
        "vui-google-one-tap": VuiGoogleOneTap;
        "vui-i18n": VuiI18n;
        "vui-icon": VuiIcon;
        "vui-label": VuiLabel;
        "vui-link": VuiLink;
        "vui-logo": VuiLogo;
        "vui-otp": VuiOtp;
        "vui-placeholder": VuiPlaceholder;
        "vui-powered-by": VuiPoweredBy;
        "vui-signin": VuiSignin;
        "vui-signup": VuiSignup;
        "vui-spinner": VuiSpinner;
        "vui-textbox": VuiTextbox;
        "vui-theme-toggle": VuiThemeToggle;
        "vui-toast": VuiToast;
        "vui-user-menu": VuiUserMenu;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "verite-connector": LocalJSX.VeriteConnector & JSXBase.HTMLAttributes<HTMLVeriteConnectorElement>;
            "vui-auth-card": LocalJSX.VuiAuthCard & JSXBase.HTMLAttributes<HTMLVuiAuthCardElement>;
            "vui-auth-footer": LocalJSX.VuiAuthFooter & JSXBase.HTMLAttributes<HTMLVuiAuthFooterElement>;
            "vui-auth-header": LocalJSX.VuiAuthHeader & JSXBase.HTMLAttributes<HTMLVuiAuthHeaderElement>;
            "vui-button": LocalJSX.VuiButton & JSXBase.HTMLAttributes<HTMLVuiButtonElement>;
            "vui-card": LocalJSX.VuiCard & JSXBase.HTMLAttributes<HTMLVuiCardElement>;
            "vui-card-content": LocalJSX.VuiCardContent & JSXBase.HTMLAttributes<HTMLVuiCardContentElement>;
            "vui-card-description": LocalJSX.VuiCardDescription & JSXBase.HTMLAttributes<HTMLVuiCardDescriptionElement>;
            "vui-card-footer": LocalJSX.VuiCardFooter & JSXBase.HTMLAttributes<HTMLVuiCardFooterElement>;
            "vui-card-header": LocalJSX.VuiCardHeader & JSXBase.HTMLAttributes<HTMLVuiCardHeaderElement>;
            "vui-card-title": LocalJSX.VuiCardTitle & JSXBase.HTMLAttributes<HTMLVuiCardTitleElement>;
            "vui-divider": LocalJSX.VuiDivider & JSXBase.HTMLAttributes<HTMLVuiDividerElement>;
            "vui-dropdown-menu": LocalJSX.VuiDropdownMenu & JSXBase.HTMLAttributes<HTMLVuiDropdownMenuElement>;
            "vui-dropdown-menu-content": LocalJSX.VuiDropdownMenuContent & JSXBase.HTMLAttributes<HTMLVuiDropdownMenuContentElement>;
            "vui-dropdown-menu-item": LocalJSX.VuiDropdownMenuItem & JSXBase.HTMLAttributes<HTMLVuiDropdownMenuItemElement>;
            "vui-dropdown-menu-separator": LocalJSX.VuiDropdownMenuSeparator & JSXBase.HTMLAttributes<HTMLVuiDropdownMenuSeparatorElement>;
            "vui-dropdown-menu-trigger": LocalJSX.VuiDropdownMenuTrigger & JSXBase.HTMLAttributes<HTMLVuiDropdownMenuTriggerElement>;
            "vui-error-message": LocalJSX.VuiErrorMessage & JSXBase.HTMLAttributes<HTMLVuiErrorMessageElement>;
            "vui-flex": LocalJSX.VuiFlex & JSXBase.HTMLAttributes<HTMLVuiFlexElement>;
            "vui-form-control": LocalJSX.VuiFormControl & JSXBase.HTMLAttributes<HTMLVuiFormControlElement>;
            "vui-google-one-tap": LocalJSX.VuiGoogleOneTap & JSXBase.HTMLAttributes<HTMLVuiGoogleOneTapElement>;
            "vui-i18n": LocalJSX.VuiI18n & JSXBase.HTMLAttributes<HTMLVuiI18nElement>;
            "vui-icon": LocalJSX.VuiIcon & JSXBase.HTMLAttributes<HTMLVuiIconElement>;
            "vui-label": LocalJSX.VuiLabel & JSXBase.HTMLAttributes<HTMLVuiLabelElement>;
            "vui-link": LocalJSX.VuiLink & JSXBase.HTMLAttributes<HTMLVuiLinkElement>;
            "vui-logo": LocalJSX.VuiLogo & JSXBase.HTMLAttributes<HTMLVuiLogoElement>;
            "vui-otp": LocalJSX.VuiOtp & JSXBase.HTMLAttributes<HTMLVuiOtpElement>;
            "vui-placeholder": LocalJSX.VuiPlaceholder & JSXBase.HTMLAttributes<HTMLVuiPlaceholderElement>;
            "vui-powered-by": LocalJSX.VuiPoweredBy & JSXBase.HTMLAttributes<HTMLVuiPoweredByElement>;
            "vui-signin": LocalJSX.VuiSignin & JSXBase.HTMLAttributes<HTMLVuiSigninElement>;
            "vui-signup": LocalJSX.VuiSignup & JSXBase.HTMLAttributes<HTMLVuiSignupElement>;
            "vui-spinner": LocalJSX.VuiSpinner & JSXBase.HTMLAttributes<HTMLVuiSpinnerElement>;
            "vui-textbox": LocalJSX.VuiTextbox & JSXBase.HTMLAttributes<HTMLVuiTextboxElement>;
            "vui-theme-toggle": LocalJSX.VuiThemeToggle & JSXBase.HTMLAttributes<HTMLVuiThemeToggleElement>;
            "vui-toast": LocalJSX.VuiToast & JSXBase.HTMLAttributes<HTMLVuiToastElement>;
            "vui-user-menu": LocalJSX.VuiUserMenu & JSXBase.HTMLAttributes<HTMLVuiUserMenuElement>;
        }
    }
}
