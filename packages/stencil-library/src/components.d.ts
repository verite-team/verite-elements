/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface RocBadge {
        "type": 'info' | 'warning' | 'danger' | 'success';
    }
    interface RocClock {
    }
}
export interface RocClockCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRocClockElement;
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLRocBadgeElement extends Components.RocBadge, HTMLStencilElement {
    }
    var HTMLRocBadgeElement: {
        prototype: HTMLRocBadgeElement;
        new (): HTMLRocBadgeElement;
    };
    interface HTMLRocClockElementEventMap {
        "timeChange": number;
    }
    interface HTMLRocClockElement extends Components.RocClock, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRocClockElementEventMap>(type: K, listener: (this: HTMLRocClockElement, ev: RocClockCustomEvent<HTMLRocClockElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRocClockElementEventMap>(type: K, listener: (this: HTMLRocClockElement, ev: RocClockCustomEvent<HTMLRocClockElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRocClockElement: {
        prototype: HTMLRocClockElement;
        new (): HTMLRocClockElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "roc-badge": HTMLRocBadgeElement;
        "roc-clock": HTMLRocClockElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface RocBadge {
        "type"?: 'info' | 'warning' | 'danger' | 'success';
    }
    interface RocClock {
        "onTimeChange"?: (event: RocClockCustomEvent<number>) => void;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "roc-badge": RocBadge;
        "roc-clock": RocClock;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "roc-badge": LocalJSX.RocBadge & JSXBase.HTMLAttributes<HTMLRocBadgeElement>;
            "roc-clock": LocalJSX.RocClock & JSXBase.HTMLAttributes<HTMLRocClockElement>;
        }
    }
}
